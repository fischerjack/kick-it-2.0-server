#!/usr/bin/env node

const http = require('http');

let app = require('../app');

//For chat and multiplayer


// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

const socket = require('socket.io');
const io = socket(server);

const usersOnline = [];
// const gamesRunning = [];

io.on('connection', (socket) => {
  console.log(socket.id);
    
  socket.on('SEND_MESSAGE', function(data){
    io.emit('RECEIVE_MESSAGE', data);
  });
  
  socket.on('SEND_NEW_USER_ONLINE', function(user){
    if(usersOnline.findIndex(element => {user._id === element._id}) === -1){
      usersOnline.push(user);
    }
    io.emit('RECEIVE_NEW_USER_ONLINE', usersOnline);
  });

  socket.on('SEND_DELETE_FROM_USERS_ONLINE', function(user){
    const indexToRemove = usersOnline.findIndex(element => {
      return user._id === element._id
    });
    if(indexToRemove != -1){
      usersOnline.splice(indexToRemove, 1);
      io.emit('RECEIVE_DELETE_FROM_USERS_ONLINE', usersOnline);
    }
  });


  //NEED TO SEPARATE EXISTING GAME FILES - GAME DRAWING FOR CLIENT SIDE AND GAME CONTROL FOR SERVER SIDE
  
  // socket.on('SEND_CREATE_NEW_GAME', function(data){
  //   gamesRunning.push({
  //     gameInstance: new,
  //     owner: data._id,
  //     players: [data._id]
  //   });
  //   io.emit('RECEIVE_CREATE_NEW_GAME', data);
  // });


});

